import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { REGISTER, LOGIN, FORGOT, CHANGE_PASSWORD } from "./actions";
import { changePasswordRequest, forgotPasswordRequest, loginRequest, registerRequest } from "services/auth/authAPI";

const initialState = {
  keepLoggedIn: false,
  isLoggedIn: false,
  isInitialized: true,
  user: null,
  status: "idle",
  reqResponse: null,
};

// Make async login request.
export const loginAsync = createAsyncThunk(
  LOGIN,
  async ( userLoginObj ) => {
    const response = await loginRequest( userLoginObj );
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const registerAsync = createAsyncThunk(
  REGISTER,
  async ( userRegisterObj ) => {
    const response = await registerRequest( userRegisterObj );
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const forgotAsync = createAsyncThunk(
  FORGOT,
  async ( userRegisterObj ) => {
    const response = await forgotPasswordRequest( userRegisterObj );
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const changePasswordAsync = createAsyncThunk(
  CHANGE_PASSWORD,
  async ( userRegisterObj ) => {
    const response = await changePasswordRequest( userRegisterObj );
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const authSlice = createSlice( {
  name: "auth",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    logout: ( state ) => {
      // Setup value to null.
      state.user = null;
      state.isLoggedIn = false;
    },
    setLoginTrue: ( state ) => {
      // Setup value to null.
      state.isLoggedIn = true;
    },
    setKeepLoggedIn: ( state, action ) => {
      // Setup value to null.
      state.keepLoggedIn = action.payload;
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other reducers.
  extraReducers: ( builder ) => {
    builder
      .addCase( loginAsync.pending, ( state ) => {
        state.status = "loading";
        state.user = null;
      } )
      .addCase( loginAsync.fulfilled, ( state, action ) => {
        state.status = "idle";
        state.user = action.payload;
      } )
      .addCase( registerAsync.pending, ( state ) => {
        state.status = "loading";
        state.user = null;
      } )
      .addCase( registerAsync.fulfilled, ( state, action ) => {
        state.status = "idle";
        state.user = action.payload;
      } )
      .addCase( forgotAsync.pending, ( state ) => {
        state.status = "loading";
        state.user = null;
      } )
      .addCase( forgotAsync.fulfilled, ( state, action ) => {
        state.status = "idle";
        state.user = action.payload;
      } )
      .addCase( changePasswordAsync.pending, ( state ) => {
        state.status = "loading";
        state.reqResponse = null;
      } )
      .addCase( changePasswordAsync.fulfilled, ( state, action ) => {
        state.status = "idle";
        state.reqResponse = action.payload;
      } );
  }
} );

export const {
  logout,
  setLoginTrue,
  setKeepLoggedIn
} = authSlice.actions;

// Select a auth from the state.
export const selectAuth = ( state ) => state.auth;

export default authSlice.reducer;
